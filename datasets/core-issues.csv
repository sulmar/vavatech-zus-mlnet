ID	Area	Title	Description
29338	area-System.Net	Include fragment and query in Uri.LocalPath on Unix	While testing XmlUriResolver, @pjanotti discovered that any segments of a file path following a '#' symbol will be cut out of Uri.LocalPath on Unix. Based on additional tests, this also occurs for the '?' symbol. This is happening because the Unix specific case for local path only uses the path component of the URI:  https://github.com/dotnet/corefx/blob/9e8d443ff78c4f0a9a6bedf7f95961cf96ceff0a/src/System.Private.Uri/src/System/Uri.cs#L1032-L1037    The fix here is to include the fragment and query in LocalPath in the Unix path specific case. This PR enables the test case in XmlUriResolver that uncovered this issues, and adds some additional cases to our URI tests.    Fixes: #28486 
29337	area-System.Net	Unify setting null CookieContainer behavior on HttpClientHandler	For HttpClientHandler layer (above the WinHttpHandler layer on Windows), we should be consistent and throw the exception in the CookieContainer setter when null value is provided, to match .NET Framework's behavior.  This would keep the same behavior across all platforms for the setter of the HttpClientHandler.CookieContainer property.    Close: #3205
29334	area-System.Net	Check URI scheme length only after verifying the scheme contains valid characters	"URI construction is failing on valid URIs under the following conditions:  - An absolute URI is constructed using the `Uri(Uri absolute, string relative)` constructor.  - The relative string begins with 1024+ characters, followed by a colon.  - The relative string contains but does not begin with a forward or back slash.    See the test added in this PR for an example URI.    The fix is to check the scheme length _after_ validating that the potential scheme contains only legal characters (ie, not a forward or back slash). This keeps us from running into the situation above, where the relative URI contains a colon that is unambiguously not a scheme separator because the ""scheme"" is actually just a path that contains a colon.    This fix improves the correctness of our relative path parsing at the cost of an additional stacalloc in the case where the relative part of the URI is really an absolute URI with a scheme length >= 1024.    Fixes: #29011     Details below:  ---------  When we construct an absolute URI from a relative URI, the first thing we try to do is parse the relative URI as an absolute URI. That parsing process returns an error code that we use to determine what happens next. The parsing errors are as follows:  https://github.com/dotnet/corefx/blob/bffef76f6af208e2042a2f27bc081ee908bb390b/src/System.Private.Uri/src/System/UriEnumTypes.cs#L67-L93    If we successfully parse an absolute URI (error = None), we return that URI and ignore the absolute URI we were passed.   That might seem a little odd, but it's a useful behavior in practice.    If we get an error that is less than `LastRelativeUriOkErrIndex`(see the code above), we attempt to create a relative URI from the string and then root it with the absolute URI provided.    If we return any other error, we believe that the string is neither a valid relative or absolute URI and throw an exception. In this case, PrivateParseMinimal is returning the error `SchemeLimit`, which indicates that we have too large of a scheme. As documented in the code above, this isn't considered a recoverable error.    The relative string provided has some characters that are clearly invalid in a scheme, so the real error we should be returning from TryParse is `InvalidScheme`. Since `InvalidScheme` is less than `LastRelativeUriOkErrIndex`, we will then be able to create a relative URI. Fixing the returned parsing error allows this URI to be constructed successfully."
29331	area-Infrastructure	"[Perf] Ubuntu16.04 runs blocked by multiple ""PE file is already strong-name signed."" errors"	[perf_ubuntu16.04_release](https://ci2.dot.net/job/dotnet_corefx/job/perf/job/master/job/perf_ubuntu16.04_release/1715/consoleText)    ```bash  bash ./build-managed.sh -release -tests -- /p:Performance=true /p:TargetOS=Linux /m:1 /p:LogToBenchview=true /p:BenchviewRunType=rolling /p:PerformanceType=Profile  ```  ...    /home/administrator/jenkins/w/dotnet_corefx/perf/master/perf_ubuntu16.04_release/Tools/sign.targets(113,5): error : /home/administrator/jenkins/w/dotnet_corefx/perf/master/perf_ubuntu16.04_release/bin/obj/ref/System.Threading.Tasks.Dataflow/4.6.3.0/netstandard/System.Threading.Tasks.Dataflow.dll: PE file is already strong-name signed. [/home/administrator/jenkins/w/dotnet_corefx/perf/master/perf_ubuntu16.04_release/src/System.Threading.Tasks.Dataflow/ref/System.Threading.Tasks.Dataflow.csproj]      0 Warning(s)      32 Error(s)
29329	area-System.ComponentModel	Port System.ComponentModel.Composition.Registration (MEF1) to .NET Core	Greetings,    regarding [Port System.ComponentModel.Composition (MEF1) to .NET Core](https://github.com/dotnet/corefx/issues/11857) the following is still missing:    - `System.ComponentModel.Composition.Registration.RegistrationBuilder`  - `System.ComponentModel.Composition.Registration.PartBuilder`  - `System.ComponentModel.Composition.Registration.PartBuilder<>`    See also https://github.com/dotnet/corefx/issues/11857#issuecomment-382342975    edit by @ViktorHofer: fixed link.
29328	area-Infrastructure	Port LTTng fix for rootfs from CoreCLR	Port https://github.com/dotnet/coreclr/pull/17762 to CoreFx.
29327	area-System.Security	Enable EnvelopedCms to work with an external private key	There are two scenarios that are not currently possible with the EnvelopedCms class.    1) Decrypting the contents of an EnvelopedCms with an unattached/unattachable key (a la RSAKeyVault).  2) Being able to prove which certificate+key were used for the decryption operation, because the existing members all dive into the CurrentUser\My certificate store looking for other candidate certs+keys.  (https://stackoverflow.com/questions/49815448/can-envelopedcms-be-used-to-identify-the-encryption-certificate)    The strawman suggestion is a new Decrypt overload which does not initiate a store search, and happens to allow specifying a private key.    ```diff  public partial class EnvelopedCms  {  +    public void Decrypt(X509Certificate2 certificate, AsymmetricAlgorithm privateKey) => throw null;  }  ```    Maybe it also makes sense for the RecipientInfo overload.    Verifying the private key really belongs to the public key is a little trickier.  Maybe it's not important for Decrypt, since the certificate finds the matching recipient key info and the private key turns that back into the symmetric key... it either works or it doesn't.    Maybe this would be `TryDecrypt`, and returns false if the cert matches no recipients?
29325	area-System.Runtime	The type initializer for 'TimeZoneConverter.TZConvert' threw an exception.	"I got this error on aws lambda.  The type initializer for 'TimeZoneConverter.TZConvert' threw an exception.  ""errorMessage"": ""An item with the same key has already been added. Key: Canada/East-Saskatchewan"","
29324	area-Infrastructure	Remove manual typeforwards to S.P.CoreLib for now exposed types.	Relates to https://github.com/dotnet/coreclr/pull/17185    @safern I would like to get rid off the ValueTuple typeforwards and with that get rid of the whole manual shim for mscorlib. That requires that we compile against a newer netfx version where ValueTuples are inbox.     cc @jkotas
29323	area-System.IO	MacOS - Special hidden folders	Dear corefx team,  We have encountered a special case of hidden folders in MacOs based machines.    When using DirectoryInfo to map the users machine, we are interested in knowing which folders are hidden, therefore checking the `FileAttributes.Hidden` attribute, which is determined if the file\directory name starts with a dot - '.'  Sadly, we found out that in MacOS uses additional file system flags to mark folders as - **hidden**.    We can check it by using the Terminal, or iTerm in my case and navigating to the home folder of a user and using `ls -l` to output the file dir.  ![image](https://user-images.githubusercontent.com/32832019/39242329-5a3d57e2-4892-11e8-9bc8-ff8420d9090d.png)    as we can see there are no UNIX hidden folders which starts with a dot.  But `Library` is a hidden folder.  If we would pass the `O` flag to show file flags (-O is a flag only in MacOS)  ![image](https://user-images.githubusercontent.com/32832019/39242842-2db4ced8-4894-11e8-8f83-d4d867522b45.png)    As we can see there are additional flags that mark a folder as hidden.  to set or unset the flag we use `chflags` with the `hidden` or `nohidden` arguments.    .NET Core info  ```  .NET Command Line Tools (2.0.0)    Product Information:   Version:            2.0.0   Commit SHA-1 hash:  cdcd1928c9    Runtime Environment:   OS Name:     Mac OS X   OS Version:  10.13   OS Platform: Darwin   RID:         osx.10.12-x64   Base Path:   /usr/local/share/dotnet/sdk/2.0.0/    Microsoft .NET Core Shared Framework Host      Version  : 2.0.0    Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d  ```    Is there anything we can do to workaround this?  I've poked around corefx + coreclr and saw that the DirectoryEntry struct only uses iNodeType to determine multiple attributes.  Is there a plan to support flags in the future?    Thank you very much,  Hagai.    
29322	area-System.Runtime	Remove hashtable & friends compiled files from System.Runtime.Extensions	This commit needs to be reverted when the new uapaot build (that contains the hashtable changes) is ingested: https://github.com/dotnet/corefx/commit/2e34bf9d93e23c2fdf978e457543b95906226721.    cc @jkotas
29321	area-System.Xml	[System.Private.Xml.Linq] Rename FunctionalTests classes	It allows to fix build issues and makes easier import System.Private.Xml.Linq tests to Mono (https://github.com/mono/mono/issues/8122).
29320	area-System.Collections	Test failure: System.Collections.Concurrent.Tests.PartitionerStaticTests/TestStaticPartitioningArray	Opened on behalf of @Sunny-pu  The test `System.Collections.Concurrent.Tests.PartitionerStaticTests/TestStaticPartitioningArray` has failed.  System.AggregateException : One or more errors occurred. (Assert.Throws() Failure\r     Expected: typeof(System.InvalidOperationException)\r     Actual:   typeof(System.Exception): Cannot create a file when that file already exists. (Exception from HRESULT: 0x800700B7))\r     ---- Assert.Throws() Failure\r     Expected: typeof(System.InvalidOperationException)\r     Actual:   typeof(System.Exception): Cannot create a file when that file already exists. (Exception from HRESULT: 0x800700B7)          Stack Trace:             at System.Threading.Tasks.Task.WaitAllCore(Task[] tasks, Int32 millisecondsTimeout, CancellationToken cancellationToken)        at System.Collections.Concurrent.Tests.PartitionerStaticTests.TestPartitioningCore(Int32 dataSize, Int32 partitionCount, Int32[] data, Boolean staticPartitioning, IEnumerator`1[] partitions) in E:\A\_work\4\s\corefx\src\System.Collections.Concurrent\tests\PartitionerStaticTests.cs:line 288        at System.Collections.Concurrent.Tests.PartitionerStaticTests.RunTestWithAlgorithm(Int32 dataSize, Int32 partitionCount, Int32 algorithm) in E:\A\_work\4\s\corefx\src\System.Collections.Concurrent\tests\PartitionerStaticTests.cs:line 186        at System.Collections.Concurrent.Tests.PartitionerStaticTests.TestStaticPartitioningArray() in E:\A\_work\4\s\corefx\src\System.Collections.Concurrent\tests\PartitionerStaticTests.cs:line 29     ----- Inner Stack Trace -----        at Windows.ApplicationModel.Resources.Core.ResourceContext.Clone()        at System.Resources.WindowsRuntimeResourceManager.Initialize(String libpath, String reswFilename, PRIExceptionInfo& exceptionInfo) in E:\A\_work\4\s\corefx\src\System.Runtime.WindowsRuntime\src\System\Resources\WindowsRuntimeResourceManager.cs:line 401        at System.Resources.ResourceManager.SetAppXConfiguration()        at System.Resources.ResourceManager..ctor(Type resourceSource)        at System.SR.get_ResourceManager() in E:\A\_work\4\s\corefx\src\Common\src\System\SR.cs:line 15        at System.SR.GetResourceString(String resourceKey, String defaultString) in E:\A\_work\4\s\corefx\src\Common\src\System\SR.cs:line 27        at System.Collections.Concurrent.Partitioner.StaticIndexRangePartitionForArray`1.get_Current() in E:\A\_work\4\s\corefx\src\System.Collections.Concurrent\src\System\Collections\Concurrent\PartitionerStatic.cs:line 1614        at System.Collections.Concurrent.Tests.PartitionerStaticTests.<>c__DisplayClass11_1.<TestPartitioningCore>b__1() in E:\A\_work\4\s\corefx\src\System.Collections.Concurrent\tests\PartitionerStaticTests.cs:line 253 Build : Master - 20180425.01 (UWP F5 Tests) Failing configurations: - Windows.10.Amd64.ClientRS3-x64   - Release  Details: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fuwp~2F/build/20180425.01/workItem/System.Collections.Concurrent.Tests/analysis/xunit/System.Collections.Concurrent.Tests.PartitionerStaticTests~2FTestStaticPartitioningArray